##브랜치 만들기
$ git init manual
$ cd manual
또는 
$ mkdir manual
$ cd manual
$ git init

$ vi work.txt
  --> content 1 이라고 쓰고 저장

$ git add work.txt
$ git commit -m 'work 1'   # repository 에 저장

$ vi work.txt
  --> content 2  를 추가 
$ git commit -am 'work 2'

$ vi work.txt
  --> content 3  를 추가 
$ git commit -am 'work 3'

$ git log

## 새로운 브랜치 생성
$git branch

--> apple branch  생성
$ git branch apple
$ git branch

--> google, ms branch 생성
$ git branch google
$ git branch ms
$ git branch

--> main 의  work.txt  수정 -> main content 4
$ vi work.txt
 ---> main content 4
$ git commit -am 'main content 4'

--> branch 이동 
$ git checkout apple  --> apple 로 브랜치 이동
$ git log --oneline

$ git log --oneline --branches --graph

-->  두 브랜치 사이의 차이점 알아보기
$ git log main..apple  --> main 기준으로 apple 브렌치의 변경 사항을 보여 줌

##   브랜치 병합하기
$ cd ~  -->   홈 디렉토리로 이동
$ git init manual-2
$ cd manual-2
$ vi work.txt --> 1 을 추가
$ git add work.txt
$ git commit -m 'work 1'
$ git log

$ vi main.txt ==> main 2
$ git add main.txt
$ git commit -m 'main work 2'

==> o2로 이동해서 o2.txt 를 생성 --> o2 2
$ git checkout o2
$ vi o2.txt
    --> o2 2
$ git add o2.txt
$ git commit -m 'o2 work 2'

==> main 브랜치로 이동하여  o2 를 병합
$ git checkout main
$ git merge o2   # o2 를 병합

## 같은 파일의 서로다른 내용을 병합
$ git init manual-3
$ cd manual-3
$ vi work.txt
  # title
  content


  # title
  content

$ git add work.txt
$ git commit -m 'work 1'

-- branch o2   생성
$ git branch o2

-- work.txt를 수정

--  같은 파일의 같은 위치를 merge할 경우는 
->   파일을  편집기로 열어서 파일 수정 후 commit
->  merge 한  branch  삭제
$ git branch -d  브랜치명

--  수정한 파일을 임시 보관소로 이동
$ git stash -->  커밋하지 않은 수정된 파일을 임시 저장소로 이동
$ git stash pop --> 마지막 저장된 자료부터 꺼내 옴
$ git stash apply -->   보류
$ git stash drop -->  임시 저장소의 파일을 삭제




