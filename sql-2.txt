--  피벗 구현 --
create table pivottest (
username char(3),
season char(2),
amount int);

insert into pivottest values
('김범수', '겨울', 10), ('윤종신', '여름', 15),('김범수', '가을', 25),
('김범수', '봄', 37), ('윤종신', '겨울', 40),('김범수', '여름', 14),
('김범수', '겨울', 22), ('윤종신', '여름', 64);

select * from pivottest;

-->  피벗 형식으로 조회하기 :  sum(), if(), group by
select username,
       sum( if (season = '봄', amount, 0 ) ) as "봄",
       sum( if (season = '여름', amount, 0) ) as "여름",
       sum( if (season = '가을', amount, 0 ) ) as "가을",
       sum( if (season = '겨울', amount, 0 ) ) as "겨울",
       sum(amount) as "합계"
from pivottest
group by username;

-- json 타입으로 자료 조회
select json_object("name",name,"height", height ) as json_value
from usertbl
where height >= 173;

-- Join : inner join, outer join, cross join, self join
-> inner join : 두 개의 테이블의 같은 컬럼을 = 로 조인하는 경우

문)  사용자 아이디, 사용자명, 상품명, 수량을 검색
select userid  사용자아이디, name 사용자명, prodname 상품명, amount 수량
from  usertbl inner join buytbl on userid;

문) employees  스키마에서 사원번호, 사원명, 부서명을 출력 현재 근무부서명을
 (  employees, dept_emp, department, dept_emp.to_date = 9999-01-01 이면 현재 부서
-- dept_emp : emp_no  그룹을 만들고, to_date가 
  가장 큰 값의 부서번호를 찾아서 부서명 검색
select emp.emp_no  사번, concat(emp.first_name, emp.last_name) 사원명, 
        dept_name 부서명
from employees emp join
        ( select emp_no, dept_no
          from dept_emp
          where ( emp_no, dept_no )=
                    ( select emp_no, max(to_date)
                        from employees 
                        group by emp_no

--  사번, 사원명, 부서번호 마지막 근무한 부서번호를 출력
select emp_no, concat(first_name, last_name)  사원명, dept_no
from employees emp join 
         (  select emp_no, dept_no
            from dept_emp
             order by to_date desc limit 1) emp_dept on emp.emp_no = emp_dept.emp_no;
            
-- outer join : left outer join, right outer join, full outer join
select u.userid, u.name, b.prodname, u.addr, concat(mobile1, mobile2) mobile
from usertbl u join  buytbl b on u.userid = b.userid;

--  고객의 정보, 주문내역을 출력, 주문 건이 하나도 없는 고객 정보도 출력
select u.userid, u.name, b.prodname, u.addr, concat(mobile1, mobile2) mobile
from usertbl u left outer join  buytbl b on u.userid = b.userid;

-- 주문이 1건이라도 있는 고객의 아이디, 이름, 주소 출력
select distinct u.userid, name, addr
from usertbl u join buytbl b on u.userid = b.userid;

--> exists 를 사용하여 변경
select userid, name, addr
from usertbl
where exists ( select 1 from buytbl where usertbl.userid = userid );

-- 학생이름, 주소, 동아리명, 동아리방 번호를 출력
-- (  stdtbl (stdname, addr), clubtbl(clubname, roomno), 
        stdclubtbl(stdname, clubname ) )
select stdname 학생명, addr 주소, clubname 동아리명, roomno  방번호
from stdtbl s join stdclubtbl st on s.stdname = st.stdname 
                  join  clubtbl c on st.clubname = c.clubname;

select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s join stdclubtbl st on s.stdname = st.stdname 
                  join  clubtbl c on st.clubname = c.clubname;
                  
-- 클럽에 가입하지 않은 학생 정보도 출력                  
select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s left join stdclubtbl st on s.stdname = st.stdname 
		      left join  clubtbl c on st.clubname = c.clubname;
			
--  학생이 하나도 가입되지 않은 클럽 정보도 출력
select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s right join stdclubtbl st on s.stdname = st.stdname 
		      right join  clubtbl c on st.clubname = c.clubname;
              
select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s left join stdclubtbl st on s.stdname = st.stdname 
		      right join  clubtbl c on st.clubname = c.clubname;    
              
select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s left join stdclubtbl st on s.stdname = st.stdname 
		      left join  clubtbl c on st.clubname = c.clubname;  
              
-- cross join : n * m 의 결과 출력
select u.name,b.prodname
from usertbl u cross join buytbl b;

-- self join: 같은 테이블을 여러 번 조인
문)  사원명, 관리자명, 사원의 구내번호, 관리자의 구내번호
select e.emp 사원명, e.manager 관리자명, 
         e.emptel "사원의 구내번호", m.emptel "관리자의 구내번호"
from emptbl e join emptbl m on e.manager = m.emp;

--  관리자가 없는 사원의 정보도 출력
select e.emp 사원명, ifnull(e.manager,'없음') 관리자명, 
         e.emptel "사원의 구내번호", ifnull(m.emptel,'없음') "관리자의 구내번호"
from emptbl e left join emptbl m on e.manager = m.emp

-- union, union all, not in , in
-- 학생의 이름, 주소, 클럽명, 룸번호를 출력
select stdname  학생명, addr 
from stdtbl
union all
select clubname, roomno   룸번호
from clubtbl;

select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s left join stdclubtbl st on s.stdname = st.stdname 
		      left join  clubtbl c on st.clubname = c.clubname
union 
select s.stdname 학생명, addr 주소, c.clubname 동아리명, roomno  방번호
from stdtbl s right join stdclubtbl st on s.stdname = st.stdname 
		      right join  clubtbl c on st.clubname = c.clubname;  

select 
from
where
group by
having
order by

-- inner join on 
-- join on
-- [ left | right | full ] outer join  on
-- cross join
-- self join --> join on  :  from절의 테이블명에 반드시 alias명 부여

-- union , union all, not in, in
-- exists ( ) : 하나라도 검색하면 검색 종료
-- ifnull() , sum(if())

-- insert into table명 (컬럼, ..) values(값, ..)
   insert into table명 values ( 값, .. )
   insert into table명 values ( ), (),...
-- update table 명 set  컬럼명 = 값, .. where 
-- delete from table명 where

-- DML : select, insert, update, delete
    TCL : commit, rollback

-- DDL : object  관련 명령어  ->  자동  commit
   object 의 종류 :  table, index, view, sequence, synonym, procedure, function, trigger

-- DDL : create, drop, alter, truncate, comment
1) object -> table : 실제 자료가 저장되는 object
  -> usertbl 생성
  create table usertbl 
 ( userid varchar(8) not null primary key,
  name  varchar(20) not null,
  birthyear  char(4)  not null,
  addr    varchar(40) not null,
  telno   varchar(16) null,
  height smallint null,
  mdate  date null,
  email  varchar(40) null
 );
 INSERT INTO usertbl VALUES('LSG', '이승기', '1987', '서울', '010-1234-5678', 182, '2008-8-8', null);
 drop table if exists buytbl;
create table buytbl
( num int auto_increment not null primary key,
  userid varchar(8) not null,
 prodname varchar(10) not null,
 groupname char(4) null,
 price int not null,
 amount smallint not null,
 foreign key(userid)  references usertbl(userid)
);

INSERT INTO usertbl VALUES('LSG', '이승기', '1987', '서울',  '1111111', 182, '2008-8-8',null);
INSERT INTO usertbl VALUES('KBS', '김범수', '1979', '경남', '2222222', 173, '2012-4-4',null);
INSERT INTO usertbl VALUES('KKH', '김경호', '1971', '전남', '3333333', 177, '2007-7-7',null);

INSERT INTO buytbl VALUES(NULL, 'KBS', '운동화', NULL, 30, 2);
INSERT INTO buytbl VALUES(NULL, 'KBS', '노트북', '전자', 1000, 1);
INSERT INTO buytbl VALUES(NULL, 'JYP', '모니터', '전자', 200, 1);  -- error 발생

-- primary key 제약조건의 이름을 부여하면서 설정
drop table if exists uertbl;
create table usertbl (
userid char(8) not null,
name varchar(20) not null,
birthyear int not null,
constraint primary key usertbl_userid_pk (userid));

-- table 생성 : primary key, foreign key 
-- table 변경 : 제약조건 추가, 삭제, 컬럼 수정, 컬럼 삭제, 컬럼 추가

1) 제약조건 추가 : 
  add constraint 제약조건명 제약조건종류 (컬럼명)
alter table usertbl
  add constraint pk_usertbl_userid primary key (userid); 

2) 제약조건 삭제 : 
 alter table buytbl
  drop constraint buytbl_ibfk_1;  

-- not null 제약조건 추가
alter table usertbl
add column test char(10);

alter table usertbl
modify test constraint usertbl_test_nn not null;

-- table 변경
 - 제약조건 추가, 삭제
 - 컬럼 추가, 수정, 삭제
alter table 테이블명
 add constraint | column 
 drop column 컬럼명
 drop foreign key 제약조건명
        primary key

 modify 컬럼 재정의 

-- mydb 생성
-- member 테이블 생성 : member_id, member_name, member_passwd, member_email, member_hp, member_indate
-- product 테이블 생성 : product_id, product_name, product_price, product_detail
-- order 테이블 생성 : order_id, order_date, order_price, member_id
-- orderdetail 테이블 생성 : order_id, product_id, amount, money



create database mydb;
use mydb;
create table member(
	member_id varchar(10) not null primary key, 
	member_name varchar(20) not null, 
	member_passwd varchar(20) not null, 
	member_email varchar(40), 
	member_hp varchar(16), 
	member_indate date default (current_date));
create table product(
	product_id int auto_incremetn not null primary key, 
	product_name varchar(50) not null, 
	product_price int, 
	product_detail varchar(100))
create table ordert (
	order_id int auto_increment not null primary key, 
	order_date date default (current_date), 
	order_price int not null, 
	member_id varchar(10),
	foreign key (member_id) references member(member_id));
crate table orderdetail (
	order_id int,
	foreign key (order_id) references member(member_id), 
	product_id int,
	foreign key (product_id) references product(product_id), 
	amount int not null, 
	money int not null);
alter table orderdetail add primary key (order_id, product_id);










